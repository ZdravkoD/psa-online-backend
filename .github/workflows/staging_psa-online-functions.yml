name: Build and deploy Python project to Azure Function App - psa-online-functions

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'azure-functions' # set this to the path to your functions directory
  PYTHON_VERSION: '3.11' # set this to the python version to use
  DOCKER_IMAGE_NAME: 'kfzzdravko/psa-online-scraper'
  DOCKER_PLATFORM: 'linux/amd64' # set this for Docker build if needed

jobs:
  build-azure-functions:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies and package functions
        run: |
          python -m venv venv
          source venv/bin/activate
          python shared_lib/setup.py install
          find azure-functions -name requirements.txt -execdir pip install -r {} \;

      - name: Zip artifact for deployment
        run: |
          zip -r release.zip azure-functions -x "*/venv/*" -x "*/.venv/*" -x "*/__pycache__/*" -x "*/local.settings.json" "*/.gitignore"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip
                    
  deploy-azure-functions:
    runs-on: ubuntu-latest
    needs: build-azure-functions
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-function.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip     

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'psa-online-functions'
          slot-name: 'staging'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          scm-do-build-during-deployment: true
          enable-oryx-build: true
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_A9BD903092ED444AB794B1B8EDB62D1D }}

  build-and-test-scraper:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scraper/requirements.txt

  deploy-scraper-to-aci:
    runs-on: ubuntu-latest
    needs: build-and-test-scraper
    environment:
      name: 'staging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          # {
          #   "clientSecret":  "******",
          #   "subscriptionId":  "******",
          #   "tenantId":  "******",
          #   "clientId":  "******"
          # }
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image with timestamp tag
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          platforms: ${{ env.DOCKER_PLATFORM }}
          context: ./scraper

      - name: Stop existing Azure Container Instance
        run: |
          if az container show --name scraper-container --resource-group psa; then
            echo "Container exists. Stopping it..."
            az container stop --name scraper-container --resource-group psa
          else
            echo "Container does not exist. Skipping stop command."
          fi

      - name: Wait for container to stop
        run: |
          if ! az container show --name scraper-container --resource-group psa; then
            echo "Container does not exist. Skipping wait command."
            exit 0
          fi
          # Loop until the container is not in the 'Running' state
          while true; do
            # Get the current state of the container
            state=$(az container show --name scraper-container --resource-group psa --query "containers[0].instanceView.currentState.state" -o tsv)
            
            echo "Current state: $state"
  
            # Break the loop if the state is 'Stopped'
            if [ "$state" == "Stopped" ]; then
              echo "Container has stopped."
              break
            elif [ "$state" == "Failed" ]; then
              echo "Container provisioning failed."
              exit 1
            fi
  
            # Sleep for a while before polling again
            echo "Waiting for container to stop..."
            sleep 10
          done

      - name: Remove existing Azure Container Instance
        run: |
          if az container show --name scraper-container --resource-group psa; then
            echo "Container exists. Deleting it..."
            az container delete --name scraper-container --resource-group psa --yes
          else
            echo "Container does not exist. Skipping delete command."
          fi

      - name: Deploy new Azure Container Instance
        run: |
          az container create \
            --resource-group psa \
            --name scraper-container \
            --image ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            --environment-variables NEW_VAR='value' \
            --restart-policy OnFailure
